var uid = widget.identifier;

/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
	
	widget.setPreferenceForKey(null, uid + "-google_user");
	widget.setPreferenceForKey(null, uid + "-google_pass");
	widget.setPreferenceForKey(null, uid + "-google_profile");
	widget.setPreferenceForKey(null, uid + "-google_authtoken");
	widget.setPreferenceForKey(null, uid + "-google_sitename");
	widget.setPreferenceForKey(null, uid + "-timeframe");
	widget.setPreferenceForKey(null, uid + "-graphdata");
	clearTimeout(update);
}

	
//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
	clearTimeout(update);
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
	var now = new Date();
	if ((lastUpdate.getTime() + 1000 * 10 * 10) < now)
		refreshData();
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
    
	dashcode.createInstancePreferenceKey(uid + "-google_user");
	dashcode.createInstancePreferenceKey(uid + "-google_pass");
	dashcode.createInstancePreferenceKey(uid + "-google_authtoken");
	dashcode.createInstancePreferenceKey(uid + "-google_profile");
	dashcode.createInstancePreferenceKey(uid + "-google_sitename");
	dashcode.createInstancePreferenceKey(uid + "-timeframe");
	dashcode.createInstancePreferenceKey(uid + "-graphdata");
	
	//refreshData();
    
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}


//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}
	

//
// Main functions for the GAget
// by Zoltan Hosszu - http://www.zoltanhosszu.com/
//


// VARIABLES
var justAuthed = false;
var lastUpdate = new Date();
var updateChecked = new Date();
var forceUpdateCheck = true;
var refreshTime = 1000 * 10 * 6; // REFRESH INTERVALL


var update = setTimeout(function() {
	var now = new Date();
	if (lastUpdate < now)
		refreshData();
}, refreshTime); // REFRESH DATA

var allbounce = new Array(),
	allnew = new Array(),
	allvisits = new Array(),
	dayofweek = new Array()
	errorcode = 0,
	version = '',
	analytics_data = '',
	g = '';




// GETTING AUTH KEY FROM GOOGLE
function getAccountAuth() {
	$.ajax({
		type: 'POST',
		url: 'https://www.google.com/accounts/ClientLogin',
		beforeSend: function() {
			$('#text_authmsg').html('Authenticating with Google.').addClass('loading').show();
			$('#select_profile, #text_profile, #select_timeframe').hide();
		},
		data: {
			accountType: 'HOSTED_OR_GOOGLE',
			Email: $('input#username').val(),
			Passwd: $('input#password').val(),
			service: 'analytics',
			source: 'gaget-osx'
		},
		dataType: 'html',
		success: function(data) {
			var adat = data.split('=');
			var token = adat[3].split('\n');
			getAccountProfiles(token[0]);
			
			justAuthed = true;
			widget.setPreferenceForKey(token[0], uid + '-google_authtoken');
			
		},
		error: function(code) {
			$('#text_authmsg').html("Authentication error. Please verify your information!").removeClass('loading');
		}
	});
}

function by(a,b) {
	return ((a[1].toLowerCase() < b[1].toLowerCase()) ? -1 : ((a[1].toLowerCase() > b[1].toLowerCase()) ? 1 : 0));
}


// GETTING THE PROFILES DATA FROM GOOGLE
function getAccountProfiles(token) {
	$.ajax({
		type: 'GET',
		url: 'https://www.googleapis.com/analytics/v3/management/accounts/~all/webproperties/~all/profiles?key=--here-comes-the-api-key--',
		cache: false,
		beforeSend: function(xhr) {
			$('#text_authmsg').html('Loading your user data.');
			xhr.setRequestHeader('Connection', 'keep-alive');
			xhr.setRequestHeader('Authorization', 'GoogleLogin auth=' + token);
		},
		success: function(data) {

			$('#text_authmsg').html('Successfully authenticated!').removeClass('loading').hide();
			$('#select_profile option').remove();
			
			var profiles = new Array();
			$.each(data.items, function(index, v) {
				var id = data.items[index].id;
				var name = data.items[index].name;
				profiles.push(new Array(id, name));
			});
			
			profiles.sort(by);
			
			for (var i = 0; i < profiles.length; i++)
				$('#select_profile').append('<option value="' + profiles[i][0] +'">' + profiles[i][1] + '</option>');
				
			$('#select_profile, #text_profile, #select_timeframe').show();
			
			if (errorcode == 401)
				refreshData();
			
		},
		error: function(code) {
			$('#text_authmsg').html('Error: ' + code.status + ' ' + code.statusText + '. :( Is your account information valid?').removeClass('loading');
		}
	});
}

			
// GETTING ANALYTICS DATA FROM GOOGLE AND PROCESSING IT
function getAccountData(id) {

	$('#button_new, #button_bounce, #button_today').attr('rel', 'disabled');

	clearTimeout(update);
	var noData = setTimeout(function() {
		drawOnCanvas('nodata');
		$('#button_refresh, #button_settings, #text_updated').removeClass('active').css({'opacity' : ''});
	}, 10000);

// CALCULATING DATES
	
	var week = widget.preferenceForKey(uid + "-timeframe").replace(/week_/g, '');

	var date_start = new Date();
	date_start.setDate(date_start.getDate() - ((week * 7) - 1));
	var s_year = date_start.getFullYear();
	var s_month = date_start.getMonth() + 1; if (s_month < 10) s_month = '0' + s_month;
	var s_day = date_start.getDate(); if (s_day < 10) s_day = '0' + s_day;
	
	var date_end = new Date();
	var e_year = date_end.getFullYear();
	var e_month = date_end.getMonth() + 1; if (e_month < 10) e_month = '0' + e_month;
	var e_day = date_end.getDate(); if (e_day < 10) e_day = '0' + e_day;
	
// AJAX REQUEST
	$.ajax({
		type: 'GET',
		url: 'https://www.googleapis.com/analytics/v3/data/ga?key=--here-comes-the-api-key--&ids=ga:' + id + '&dimensions=ga:year,ga:month,ga:day,ga:dayOfWeek&metrics=ga:visitors,ga:visits,ga:pageviews,ga:percentNewVisits,ga:avgTimeOnSite,ga:visitBounceRate&sort=ga:year,ga:month,ga:day&start-date=' + s_year + '-' + s_month + '-' + s_day + '&end-date=' + e_year + '-' + e_month + '-' + e_day + '&timestamp=' + lastUpdate.getTime(),
		beforeSend: function(xhr) {
			xhr.setRequestHeader('Connection', 'keep-alive');
			xhr.setRequestHeader('Authorization', 'GoogleLogin auth=' + widget.preferenceForKey(uid + "-google_authtoken"));
		},
		cache: false,
		dataType: 'json',
		success: function(data) {
		
		
			analytics_data = data.rows;
		
			
		// TODAY
			$('#text_today_visitors').html(addCommas(data.rows[data.rows.length - 1][5]));
			$('#text_today_info').html('<span>' + addCommas(data.rows[data.rows.length - 1][4]) + '</span> unique visitors<br/><span>' + addCommas(data.rows[data.rows.length - 1][6]) + '</span> pageviews');
			
			
		// AVERAGE TIME ON SITE
			var timeonsite = Math.floor(data.totalsForAllResults["ga:avgTimeOnSite"]);
			var hours = Math.floor(timeonsite / 3600); if (hours < 10) hours = '0' + hours;
			var minutes = Math.floor(timeonsite / 60); if (minutes < 10) minutes = '0' + minutes;
			var seconds = timeonsite % 60; if (seconds < 10) seconds = '0' + seconds;
			$('#text_val_avgtime').html(hours + ':' + minutes + ':' + seconds);
			
		
		// BOUNCE RATE
			var bounce = Math.round(data.totalsForAllResults["ga:visitBounceRate"]);
			$('#text_val_bouncerate').html(bounce + '%');
			if (bounce > 99)
				$('#text_val_bouncerate').addClass('small');
			else
				$('#text_val_bouncerate').removeClass('small');
			drawPie('bounce', bounce);
			
			
		// NEW VISITORS
			var newvisitor = Math.round(data.totalsForAllResults["ga:percentNewVisits"]);
			$('#text_val_newvisitors').html(newvisitor + '%');
			if (newvisitor > 99)
				$('#text_val_newvisitors').addClass('small');
			else
				$('#text_val_newvisitors').removeClass('small');
			drawPie('newvisitor', newvisitor);
			
		
			
		// SUPPLYING DATA FOR GRAPH
			dayofweek = new Array();
			allunique = new Array();
			allvisits = new Array();
			allbounce = new Array();
			allnew = new Array();
			$.each(data.rows, function(index, v) {
				dayofweek.push(data.rows[index][3]);
				allunique.push(data.rows[index][4]);
				allvisits.push(data.rows[index][5]);
				allbounce.push(data.rows[index][9]);
				allnew.push(data.rows[index][7]);
			});
			
			
			if ((widget.preferenceForKey(uid + "-graphdata") === undefined) || (widget.preferenceForKey(uid + "-graphdata") == 'today')) {
				drawOnCanvas('visit');
				$('#text_overview').html('Visits overview for <span>' + $('#text_overview span').html() + '</span>');
			} else {
				if (widget.preferenceForKey(uid + "-graphdata") == 'bounce') {
					drawOnCanvas('bounce');
					$('#text_overview').html('Bounce rate for <span>' + $('#text_overview span').html() + '</span>');
				} else if (widget.preferenceForKey(uid + "-graphdata") == 'new') {
					drawOnCanvas('new');
					$('#text_overview').html('New visitor rate for <span>' + $('#text_overview span').html() + '</span>');
				}
			}
			
			
		// REFRESHING "UPDATED" TEXT
			var google_updated = new Date();
			var update_s = google_updated.getSeconds(); if (update_s < 10) update_s = '0' + update_s;
			var update_m = google_updated.getMinutes(); if (update_m < 10) update_m = '0' + update_m;
			var update_h = google_updated.getHours(); if (update_h < 10) update_h = '0' + update_h;
			$('#text_updated').html('Updated:<br/><strong>' + update_h + ':' + update_m + ':' + update_s + '</strong>');
			
			
		// FINISHING UP UPDATE
			$('#button_refresh, #button_settings, #text_updated').removeClass('active').css({'opacity' : ''});
			clearTimeout(noData);
			
			lastUpdate = new Date();
            $('#text_overview span').html(widget.preferenceForKey(uid + "-google_sitename"));
			checkUpdate();
			update = setTimeout(function() { refreshData(); }, refreshTime); // REFRESH DATA EVERY 10 MINUTES
			
			$('#button_new, #button_bounce, #button_today').removeAttr('rel');
			
			errorcode = 0;
			
			
		},
		error: function(code) {
			alert('error: ' + code.status + ' ' + code.statustext);
			if (!(widget.preferenceForKey(uid + "-google_user") === undefined) && !(widget.preferenceForKey(uid + "-google_pass") === undefined) && (code.status == 400)) {
				showBack();
				$('#text_authmsg').html('There seems to be a problem with your<br/>account information. Please check it!');
			}
			if ((widget.preferenceForKey(uid + "-google_user") != undefined) && (widget.preferenceForKey(uid + "-google_pass") != undefined) && (code.status == 401)) {
				errorcode = 401;
				getAccountAuth();
			}
		}
	});
}


// DRAWING DATA GRAPH
function drawOnCanvas(type) {

	var formatted_data = new Array();
	var t = 5;
	switch (type) {
		case 'visits' : t = 5; break;
		case 'bounce' : t = 9; break;
		case 'new' : t = 7; break;
	}
	
	$.each(analytics_data, function(index, v) {
		formatted_data.push({ 'datum': (analytics_data[index][0] + '-' + analytics_data[index][1] + '-' + analytics_data[index][2]), 'megtekintes': Math.floor(analytics_data[index][t]) });
	});
	
	g = new Graph();
	g.init(formatted_data, type);
}


// DRAWING PIECHARTS
function drawPie(where, value) {
    container = $('div#' + where);
    container.html('<svg xmlns="http://www.w3.org/2000/svg" version="1.2" width="100%" height="100%"></svg>');
    svg = container.find('svg');
    
    if (value == 100)
        value_rad = (Math.PI/180) - Math.PI / 2;
    else
        value_rad = (Math.PI/180) * (360 - (360 * value / 100)) - Math.PI / 2;
    
    radius = 9;
    
    svgheight = container.height();
    svgwidth = container.width();
    
    pos = (svgwidth / 2 + Math.cos(value_rad) * radius) + ',' + (svgheight / 2 + Math.sin(value_rad) * radius);
    
	svg.append('<defs><linearGradient id="bounce" x1="0%" y1="0%" x2="0%" y2="100%"><stop offset="0%" style="stop-color:rgb(255,193,73); stop-opacity:1" /><stop offset="100%" style="stop-color:rgb(226, 157, 23);stop-opacity:1" /></linearGradient></defs>');
	svg.append('<defs><linearGradient id="newvisitor" x1="0%" y1="0%" x2="0%" y2="100%"><stop offset="0%" style="stop-color:rgb(162, 246, 41); stop-opacity:1" /><stop offset="100%" style="stop-color:rgb(116, 184, 19);stop-opacity:1" /></linearGradient></defs>');
	
	svg.append('<circle cx="' + (svgwidth / 2 + 0.3) + '" cy="' + (svgheight / 2 + 0.3) + '" r="11" class="piebg"/>')
    svg.append('<path shape-rendering="geometricPrecision" fill="url(#' + where + ')" d="M ' + (svgwidth / 2) + ',' + (svgheight / 2) + ' L ' + (svgwidth / 2) + ',' + (svgheight / 2 - radius) + ' A ' + radius + ',' + radius +' 0 ' + (value <= 50 ? '0' : '1') + ' 0 ' + pos + ' z" />');
    
    svg.parent().html(svg.parent().html());

}


// FUNCTION FOR CLEARING THE DATA FROM THE SCREEN
function clearAll() {
	$('#text_today_visitors, #text_today_info, #text_val_bouncerate, #text_val_avgtime, #text_val_newvisitors, #graph, #bounce, #newvisitor').html('');
	$('#bg_bounce, #bg_newvisitor').hide();
}


// FUNCTION FOR REFRESHING DATA
function refreshData() {
	var now = new Date();
	if (lastUpdate < now) {
		//clearAll();
		$('#text_updated').css({'opacity' : 0}).css({'opacity' : '0 !important'});
		$('#button_settings, #button_refresh').show().css({'opacity' : '1 !important'});
		$('#button_refresh').addClass('active');
		getAccountData(widget.preferenceForKey(uid + "-google_profile"));
	}
}


// FUNCTION FOR FORMATTING NUMBERS
function addCommas(nStr) {
	nStr += '';
	x = nStr.split('.');
	x1 = x[0];
	x2 = x.length > 1 ? '.' + x[1] : '';
	var rgx = /(\d+)(\d{3})/;
	while (rgx.test(x1)) {
		x1 = x1.replace(rgx, '$1' + ',' + '$2');
	}
	return x1 + x2;
}



// FUNCTION FOR CHECKING GAGET UPDATES
function checkUpdate() {
	
	var now = new Date();
	
	if (((updateChecked.getTime() + 1000 * 10) < now) || (forceUpdateCheck)) {
		
		$.ajax({
			type: 'GET',
			url: 'Info.plist',
			dataType: 'xml',
			async: false,
			success: function(data) {
				$(data).find('plist').find('dict').find('key').each(function() {
					if ($(this).text() == 'CFBundleVersion')
						version = $(this).next('string').text();
				});
			}
		});
		
		$.ajax({
			type: 'GET',
			url: 'http://www.gagetapp.com/gaget-updatecheck.html',
			dataType: 'text',
			success: function(data) {
				if (version != data)
					$('div#front').append('<div id="update">' + data + '</div>');
				else
					if ($('div#update').length > 0)
						$('div#update').remove();
	
				updateChecked = new Date();
				forceUpdateCheck = false;
			}
		});
	}
}


// JQUERY ACTIONS
$(document).ready(function() {
	
	$('body').mouseover(function() {
		$('#text_updated, #text_info, #text_link').stop().animate({'opacity' : '0'});
		$('#button_settings, #button_refresh').stop().animate({'opacity' : '1'});
	}).mouseout(function() {
		$('#text_updated, #text_info, #text_link').stop().animate({'opacity' : '1'});
		$('#button_settings, #button_refresh').stop().animate({'opacity' : '0'});
	});
	
	$('div#update').live('click', function() {
		widget.openURL('http://www.gagetapp.com/?utm_source=GAget&utm_medium=update&utm_campaign=update_from_' + version + '#osx');
	});
	
	$('#branding').live('click', function() {
		widget.openURL('http://www.gagetapp.com/?utm_source=GAget&utm_medium=iphone_button&utm_campaign=backside');
	});
    
    $('#button_settings').click(function() {
		justAuthed = false;
		showBack();
	});
    
    $('#button_refresh').click(function() {
		refreshData();
	});
	
	if (!(widget.preferenceForKey(uid + "-google_profile") === undefined)) {
		getAccountData(widget.preferenceForKey(uid + "-google_profile"));
	}
	
	if (((widget.preferenceForKey(uid + "-google_user") === undefined) || (widget.preferenceForKey(uid + "-google_pass") === undefined)) || (widget.preferenceForKey(uid + "-google_authtoken") === undefined)) {
		$('#text_authmsg').html('Please fill in your Google account information!');
		$('input#username').focus();
		justAuthed = false;
		showBack();
	}
	
	if ((widget.preferenceForKey(uid + "-google_authtoken") === undefined) && !(widget.preferenceForKey(uid + "-google_user") === undefined) && !(widget.preferenceForKey(uid + "-google_pass") === undefined)) {
		getAccountAuth();
		getAccountData(widget.preferenceForKey(uid + "-google_profile"));
		$('#text_overview span').html(widget.preferenceForKey(uid + "-google_sitename"));
	} 
	
	if (!(widget.preferenceForKey(uid + "-timeframe") === undefined))
		$('#select_timeframe').val(widget.preferenceForKey(uid + "-timeframe"));
	else
		widget.setPreferenceForKey('week_2', uid + '-timeframe');
    
    $('input#username').val(widget.preferenceForKey(uid + "-google_user"));
    $('input#password').val(widget.preferenceForKey(uid + "-google_pass"));
	$('#text_overview span').html(widget.preferenceForKey(uid + "-google_sitename"));
	$('#select_profile').change(function() { justAuthed = true; });
	
    
    $('#done').click(function() {
		if (($('input#username').val() == '') || ($('input#password').val() == '')) {
			$('#text_authmsg').html('Please fill in your Google account information<br/>and press Authenticate to get the data!');
			$('input#username').focus();
		} else {
			showFront();
			clearAll();
			$('#button_refresh').addClass('active');
			widget.setPreferenceForKey($('input#username').val(), uid + '-google_user');
			widget.setPreferenceForKey($('input#password').val(), uid + '-google_pass');
			widget.setPreferenceForKey($('#select_timeframe').val(), uid + '-timeframe');
			if (justAuthed) {
				widget.setPreferenceForKey($('#select_profile').val(), uid + '-google_profile');
				widget.setPreferenceForKey($('#select_profile option[value="' + widget.preferenceForKey(uid + "-google_profile") + '"]').text(), uid + '-google_sitename');
			}
			
			getAccountData(widget.preferenceForKey(uid + "-google_profile"));
			$('#text_overview span').html(widget.preferenceForKey(uid + "-google_sitename"));
		}
    });
    
    $('#button_auth').click(function() {
		getAccountAuth();
    });
	
	$('input').keypress(function(event) {
		if ( event.which == 13 )
			getAccountAuth();
	});
	
	$('select').keypress(function(event) {
		if ( event.which == 13 )
			$('#done').click();
	});
	
					
	$('#button_today, #button_bounce, #button_new').click(function() {
		if ($(this).attr('rel') != 'disabled') {
			$('#bg_button_today, #bg_button_bounce, #bg_button_new').removeClass('activebutton');
			var id = $(this).attr('id');
			$('#bg_' + id).addClass('activebutton');
			if (id == 'button_today') {
				widget.setPreferenceForKey('today', uid + '-graphdata');
				drawOnCanvas('visit');
				$('#text_overview').html('Visits overview for <span>' + $('#text_overview span').html() + '</span>');
			} else if (id == 'button_bounce') {
				widget.setPreferenceForKey('bounce', uid + '-graphdata');
				drawOnCanvas('bounce');
				$('#text_overview').html('Bounce rate for <span>' + $('#text_overview span').html() + '</span>');
			} else if (id == 'button_new') {
				widget.setPreferenceForKey('new', uid + '-graphdata');
				drawOnCanvas('new');
				$('#text_overview').html('New visitor rate for <span>' + $('#text_overview span').html() + '</span>');
			}
		}
		
	});
	
	if (widget.preferenceForKey(uid + "-graphdata") != undefined)
		$('#bg_button_' + widget.preferenceForKey(uid + "-graphdata")).addClass('activebutton');
	else
		$('#bg_button_today').addClass('activebutton');
    
});







